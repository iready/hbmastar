<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <context:component-scan base-package="other,controller,service,view,model"></context:component-scan>
    <context:property-placeholder
            location="classpath:project.properties"/>
    <bean class="java.util.concurrent.Executors" factory-method="newCachedThreadPool"
          id="es"/>
    <bean class="java.util.concurrent.ScheduledThreadPoolExecutor" id="stpe"
          lazy-init="true">
        <constructor-arg index="0" value="10">
        </constructor-arg>
    </bean>
    <bean id="httpclient" factory-bean="myHttpClientConfigInit"
          factory-method="getClient"/>
    <bean id="asny"
          class="org.apache.http.impl.client.FutureRequestExecutionService"
          depends-on="myHttpClientConfigInit">
        <constructor-arg index="0">
            <ref bean="httpclient"></ref>
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="es"></ref>
        </constructor-arg>
    </bean>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="600000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <!-- <property name="filters" value="stat" /> -->
    </bean>
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="namingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy"/>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="${hibernate.packagesToScan}"></property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!-- <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> -->
                <!-- <prop key="hibernate.cache.use_query_cache">true</prop> -->
                <!-- <prop key="hibernate.max_fetch_depth">3</prop> -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- <prop key="hibernate.jdbc.fetch.size">18</prop> -->
                <!-- <prop key="hibernate.jdbc.depth.size">10</prop> -->
            </props>
        </property>
    </bean>
</beans>